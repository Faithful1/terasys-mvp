import React, { Component } from "react";
import axios from "axios";
import { withFormik } from 'formik';

import {
  CircularProgress,
  Typography,
  Button,
  TextField
} from "@material-ui/core";

class RegisterForm extends Component {
  state = {
    apiUrl: "https://www.terasyshub.io/api/v1/registerAdmin",
    isLoading: false,
    password: "",
    password_confirm: "",
    email: "",
    profile: {
      firstname: "",
      lastname: ""
    },
    key: "8JadZIptT2ysZPKQUAdBWw.lwewT8M4",
    errorMessage: "",
    status: "",
    errors: ""
  };

  submitHandler = e => {
    e.preventDefault();

    const headers = {
      "Content-Type": "application/json"
    };

    axios
      .post(`${this.state.apiUrl}`, this.state, { headers: headers })
      .then(response => console.log(response.data))
      .then(response => this.setState({ status: response.data }))
      .catch(error => this.setState({ errors: error.response.data }));
  };

  onChangeHandler = e => {
    this.setState({
      [e.target.name]: e.target.value
    });
  };

  render() {
    const {
      isLoading,
      email,
      password,
      password_confirm,
      status,
      errors
    } = this.state;

    return (
      <form onSubmit={this.submitHandler}>
        <Typography variant="h1" className="greeting">
          Admin
        </Typography>

        {errors ? (
          <Typography color="secondary" className="errorMessage">
            {errors}
          </Typography>
        ) : (
          <Typography color="primary" className="successMessage">
            {status}
          </Typography>
        )}

        <TextField
          id="firstname"
          name="firstname"
          className="textFieldUnderline textField"
          value={this.state.profile.firstname}
          onChange={e => {
            let { profile } = this.state;
            profile.firstname = e.target.value;
            this.setState({ profile });
          }}
          margin="normal"
          placeholder="First Name"
          type="text"
          fullWidth
        />

        <TextField
          id="lastname"
          name="lastname"
          className="textFieldUnderline textField"
          value={this.state.profile.lastname}
          onChange={e => {
            let { profile } = this.state;
            profile.lastname = e.target.value;
            this.setState({ profile });
          }}
          margin="normal"
          placeholder="Last Name"
          type="text"
          fullWidth
        />

        <TextField
          id="email"
          name="email"
          className="textFieldUnderline textField"
          value={email}
          onChange={this.onChangeHandler}
          margin="normal"
          placeholder="Email Address"
          type="email"
          fullWidth
        />
        <TextField
          id="password"
          name="password"
          value={password}
          className="textFieldUnderline textField"
          onChange={this.onChangeHandler}
          margin="normal"
          placeholder="Password"
          type="password"
          fullWidth
        />
        <TextField
          id="password_confirm"
          name="password_confirm"
          value={password_confirm}
          className="textFieldUnderline textField"
          onChange={this.onChangeHandler}
          margin="normal"
          placeholder="Confirm Password"
          type="password"
          fullWidth
        />

        <div className="creatingButtonContainer">
          {isLoading ? (
            <CircularProgress size={26} />
          ) : (
            <Button
              type="submit"
              size="large"
              variant="contained"
              color="primary"
              fullWidth
              className="createAccountButton"
            >
              Create your account
            </Button>
          )}
        </div>
      </form>
    );
  }
}

export default RegisterForm;



<form onSubmit={handleSubmit}>
      <Typography variant="h1" className="greeting">
        Admin
      </Typography>

      <TextField
        id="email"
        name="email"
        value={values.email}
        onChange={handleChange}
        placeholder="Email Address"
        className="textFieldUnderline textField"
        margin="normal"
        type="email"
        fullWidth
      />

      <TextField
        id="password"
        name="password"
        value={values.password}
        onChange={handleChange}
        placeholder="password"
        className="textFieldUnderline textField"
        margin="normal"
        type="password"
        fullWidth
      />

      <div className="creatingButtonContainer">
        <Button
          type="submit"
          size="large"
          variant="contained"
          color="primary"
          fullWidth
          className="createAccountButton"
          
        >
          Create your account
        </Button>
      </div>
    </form>


import React from "react";
import { withFormik, Form, Formik } from "formik";
import axios from "axios";
import Yup from "yup";

import {
  CircularProgress,
  Typography,
  Button,
  TextField,
  withStyles
} from "@material-ui/core";

const RegisterForm = ({ classes, values, handleChange }) => {
  return (
    <React.Fragment>
      <Form>
        <Typography variant="h1" className={classes.subGreeting}>
          Super Admin
        </Typography>

        <div className={classes.formDividerContainer}>
          <div className={classes.formDivider} />
        </div>

        <TextField
          id="firstname"
          name="firstname"
          className="textFieldUnderline textField"
          value={values.profile.firstname}
          onChange={handleChange}
          margin="normal"
          placeholder="First Name"
          type="text"
          fullWidth
        />

        <TextField
          id="email"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          value={values.email}
          onChange={handleChange}
          margin="normal"
          placeholder="Email Adress"
          type="email"
          fullWidth
        />

        <TextField
          id="password"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          value={values.password}
          onChange={handleChange}
          margin="normal"
          placeholder="Password"
          type="password"
          fullWidth
        />

        <TextField
          id="confirm_password"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          value={values.confirm_password}
          onChange={handleChange}
          margin="normal"
          placeholder="Confirm Password"
          type="password"
          fullWidth
        />

        <div className="creatingButtonContainer">
          {values.isLoading ? (
            <CircularProgress size={26} />
          ) : (
            <Button
              disabled={
                values.email.length === 0 ||
                values.password.length === 0 ||
                values.confirm_password.length === 0
              }
              type="submit"
              size="large"
              variant="contained"
              color="primary"
              fullWidth
              className="createAccountButton"
            >
              Create your account
            </Button>
          )}
        </div>
      </Form>
    </React.Fragment>
  );
};

const FormikRegister = withFormik({
  mapPropsToValues() {
    return {
      profile: {
        firstname: "",
        lastname: ""
      },
      email: "",
      password: "",
      confirm_password: "",
      isLoading: false
    };
  },
  handleSubmit(values) {
    console.log(values);
  }
})(RegisterForm);

const styles = theme => ({
  container: {
    height: "100vh",
    width: "100vw",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    top: 0,
    left: 0
  },

  formContainer: {
    width: "40%",
    height: "100%",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    [theme.breakpoints.down("md")]: {
      width: "50%"
    }
  },
  form: {
    width: 320
  },
  greeting: {
    fontWeight: 500,
    textAlign: "center",
    marginTop: theme.spacing.unit * 4
  },
  subGreeting: {
    fontWeight: 500,
    textAlign: "center",
    marginTop: theme.spacing.unit * 2
  },
  creatingButtonContainer: {
    marginTop: theme.spacing.unit * 2.5,
    height: 46,
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  },
  createAccountButton: {
    height: 46,
    textTransform: "none"
  },
  formDividerContainer: {
    marginTop: theme.spacing.unit * 4,
    marginBottom: theme.spacing.unit * 4,
    display: "flex",
    alignItems: "center"
  },
  formDividerWord: {
    paddingLeft: theme.spacing.unit * 2,
    paddingRight: theme.spacing.unit * 2
  },
  formDivider: {
    flexGrow: 1,
    height: 1,
    backgroundColor: theme.palette.text.hint + "40"
  },
  errorMessage: {
    textAlign: "center"
  },
  textFieldUnderline: {
    "&:before": {
      borderBottomColor: theme.palette.primary.light
    },
    "&:after": {
      borderBottomColor: theme.palette.primary.main
    },
    "&:hover:before": {
      borderBottomColor: `${theme.palette.primary.light} !important`
    }
  },
  textField: {
    borderBottomColor: theme.palette.background.light
  },
  formButtons: {
    width: "100%",
    marginTop: theme.spacing.unit * 4,
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center"
  }
});

export default withStyles(styles, { withTheme: true })(FormikRegister);



<div className="creatingButtonContainer">
        {isLoading ? (
          <CircularProgress size={26} />
        ) : (
          <Button
            disabled={
              email.length === 0 ||
              password.length === 0 ||
              confirm_password.length === 0
            }
            type="submit"
            size="large"
            variant="contained"
            color="primary"
            fullWidth
            className="createAccountButton"
          >
            Create your account
          </Button>
        )}
      </div>




      import React from "react";

import axios from "axios";
import Yup from "yup";

import { Formik, Field, Form } from "formik";
import { TextField } from "formik-material-ui";

import {
  Typography,
  Button,
  withStyles,
  LinearProgress
} from "@material-ui/core";

const RegisterForm = ({ classes }) => (
  <Formik
    initialValues={{
      registerAdminUrl: "https://www.terasyshub.io/api/v1/registerAdmin",
      addUser: {
        password: "",
        confirm_password: "",
        email: "",
        profile: {
          firstname: "",
          lastname: ""
        },
        key: "8JadZIptT2ysZPKQUAdBWw.lwewT8M4"
      }
    }}
    onSubmit={(values, { setSubmitting }) => {
      const { registerAdminUrl, addUser } = values;
      console.log(addUser);

      const headers = {
        "Content-Type": "application/json"
      };

      setTimeout(() => {
        setSubmitting(false);
        axios
          .post(registerAdminUrl, addUser, { headers })
          .then(response => {
            console.log(response.data);
          })
          .catch(error => {
            console.log(error.response.data);
          });
      }, 500);
    }}
    render={({ isSubmitting, values }) => (
      <Form>
        <Typography variant="h1" className={classes.subGreeting}>
          Super Admin
        </Typography>

        <div className={classes.formDividerContainer}>
          <div className={classes.formDivider} />
        </div>

        <Field
          name="addUser.profile.firstname"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          component={TextField}
          margin="normal"
          placeholder="First Name"
          type="text"
          fullWidth
        />

        <Field
          name="addUser.profile.lastname"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          component={TextField}
          margin="normal"
          placeholder="Last Name"
          type="text"
          fullWidth
        />

        <Field
          id="email"
          name="addUser.email"
          fullWidth
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          component={TextField}
          margin="normal"
          placeholder="Email Adress"
          type="email"
        />

        <Field
          name="addUser.password"
          component={TextField}
          margin="normal"
          placeholder="Password"
          type="password"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          fullWidth
        />

        <Field
          name="addUser.confirm_password"
          component={TextField}
          margin="normal"
          placeholder="Confirm Password"
          type="password"
          InputProps={{
            classes: {
              underline: classes.textFieldUnderline,
              input: classes.textField
            }
          }}
          fullWidth
        />

        <br />
        {isSubmitting && <LinearProgress />}
        <br />

        <div className="creatingButtonContainer">
          <Button
            disabled={
              values.addUser.email.length === 0 ||
              values.addUser.password.length === 0 ||
              values.addUser.confirm_password.length === 0 ||
              isSubmitting
            }
            type="submit"
            size="large"
            variant="contained"
            color="primary"
            fullWidth
            className="createAccountButton"
          >
            Create your account
          </Button>
        </div>
      </Form>
    )}
  />
);

const styles = theme => ({
  container: {
    height: "100vh",
    width: "100vw",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    top: 0,
    left: 0
  },

  formContainer: {
    width: "40%",
    height: "100%",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    [theme.breakpoints.down("md")]: {
      width: "50%"
    }
  },
  form: {
    width: 320
  },
  greeting: {
    fontWeight: 500,
    textAlign: "center",
    marginTop: theme.spacing.unit * 4
  },
  subGreeting: {
    fontWeight: 500,
    textAlign: "center",
    marginTop: theme.spacing.unit * 2
  },
  creatingButtonContainer: {
    marginTop: theme.spacing.unit * 2.5,
    height: 46,
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  },
  createAccountButton: {
    height: 46,
    textTransform: "none"
  },
  formDividerContainer: {
    marginTop: theme.spacing.unit * 4,
    marginBottom: theme.spacing.unit * 4,
    display: "flex",
    alignItems: "center"
  },
  formDividerWord: {
    paddingLeft: theme.spacing.unit * 2,
    paddingRight: theme.spacing.unit * 2
  },
  formDivider: {
    flexGrow: 1,
    height: 1,
    backgroundColor: theme.palette.text.hint + "40"
  },
  errorMessage: {
    textAlign: "center"
  },
  textFieldUnderline: {
    "&:before": {
      borderBottomColor: theme.palette.primary.light
    },
    "&:after": {
      borderBottomColor: theme.palette.primary.main
    },
    "&:hover:before": {
      borderBottomColor: `${theme.palette.primary.light} !important`
    }
  },
  textField: {
    borderBottomColor: theme.palette.background.light
  },
  formButtons: {
    width: "100%",
    marginTop: theme.spacing.unit * 4,
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center"
  }
});

export default withStyles(styles, { withTheme: true })(RegisterForm);
